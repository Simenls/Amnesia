//This is only executed when the map is loaded for the first time. Only happens once. Can be used for adding effects that should not repeat.//
void OnStart()
{
	SetEntityPlayerInteractCallback("Shelf", "InteractMoveShelf", true);
	SetEntityPlayerInteractCallback("castle_1", "InteractCellarDoor", true);
	SetEntityPlayerInteractCallback("mansion_7", "InteractOfficeDoor", true);
	SetEntityPlayerInteractCallback("mansion_7", "TouchDoor", true);
	SetEntityPlayerInteractCallback("Shelf", "Door3", true);
	SetEntityPlayerInteractCallback("mansion_3", "InteractDinnerDoor", true);
	AddUseItemCallback("", "key_tomb_1", "mansion_7", "UseKeyOnDoor", true);
	AddUseItemCallback("", "key_study_1", "mansion_3", "KeyOnDoor", true);
	AddUseItemCallback("", "RustyKey", "castle_1", "KeyOnCellarDoor", true);
	AddEntityCollideCallback("Player", "Bilde_Area", "CollideOpeningDustDoor", true, 1);
	AddEntityCollideCallback("Player", "Bilde_Area", "skummelt", true, 1);
	AddEntityCollideCallback("Player", "skummeltbilde", "neiognei", true, 1);
	AddEntityCollideCallback("Player", "stop_sound_Area", "hysj", true, 1);
	AddEntityCollideCallback("Player", "musikk", "mermusikk", true, 1);
	AddEntityCollideCallback("Player", "mermusikk", "musikken", true, 1);
	AddEntityCollideCallback("Player", "Slam", "DoorSlam", true, 1);
	AddEntityCollideCallback("Player", "Knus", "Knas", true, 1);
	AddEntityCollideCallback("Player", "Caretaker", "LookatNote", true, 1);
	AddEntityCollideCallback("Player", "Lykt", "Oil", true, 1);
	AddEntityCollideCallback("Litenspak", "spakconnect", "connect", true, 1);
}
void connect(string &in asParent, string &in asChild, int alState)
{
	SetEntityActive("lever_nice01_1", true);
	PlaySoundAtEntity("", "player_ladder_metal_up.snt", "Player", 0, false);
	SetEntityActive("spakmount", false);
	SetEntityActive("Litenspak", false);
}
void Oil(string &in asParent, string &in asChild, int alState)
{
	SetPlayerLampOil(25);
}
void Knas(string &in asParent, string &in asChild, int alState)
{
	SetPropHealth("knustvindu", 0.0f);
}

void LookatNote(string &in asParent, string &in asChild, int alState)
{
	StartPlayerLookAt("note_manual_1", 5, 10, "");
	PlayMusic("15_puzzle_hole.ogg", false, 1.0f, 0.5f, 5, false);
	AddTimer("", 2, "SeBort");
}

void SeBort(string &in asTimer)
{
	StopPlayerLookAt();
}

void DoorSlam(string &in asParent, string &in asChild, int alState)
{
	SetSwingDoorClosed("mansion_5", true, true);
	PlaySoundAtEntity("", "react_breath_slow.snt", "Player", 0, false);
	PlaySoundAtEntity("", "react_scare", "Player", 0, false);
	PlaySoundAtEntity("", "close_door.snt", "Player", 0, false);
	GiveSanityDamage(5.0f, true);
	StartPlayerLookAt("Eyes", 5, 10, "");
	PlayMusic("04_amb.ogg", true, 1, 2, 1, true);
	AddTimer("", 1, "Stopp");
}

void Stopp(string &in asTimer)
{
	StopPlayerLookAt();
}
void CollideOpeningDustDoor(string &in asParent, string &in asChild, int alState)
{
	SetEntityActive("bilde", true);
}
void mermusikk(string &in asParent, string &in asChild, int alState)
{
	PlayMusic("04_amb.ogg", true, 1, 3, 1, true);
	SetSwingDoorClosed("mansion_7", true, true);
	PlaySoundAtEntity("", "react_breath_slow.snt", "Player", 0, false);
	PlaySoundAtEntity("", "react_scare", "Player", 0, false);
	PlaySoundAtEntity("", "close_door.snt", "Player", 0, false);
	SetSwingDoorLocked("mansion_7", true, true);
	CreateParticleSystemAtEntity("door", "ps_dust_impact.ps", "ScriptArea_1", false);
}
void musikken(string &in asParent, string &in asChild, int alState)
{
	PlayMusic("15_amb.ogg", true, 1, 3, 1, true);

}
void hysj(string &in asParent, string &in asChild, int alState)
{
	StopMusic(0.5, 1);
}
void skummelt(string &in asParent, string &in asChild, int alState)
{
	SetEntityActive("skummeltbilde", true);
}

void InteractOfficeDoor(string &in asEntity)
{
	SetMessage("Sign", "Sign5", 0);
}
void InteractMoveShelf(string &in asEntity)
{
	SetMessage("Sign", "Sign4", 0);
}
void InteractDinnerDoor(string &in asEntity)
{
	SetMessage("Sign", "Sign6", 0);
}
void InteractCellarDoor(string &in asEntity)
{
	SetMessage("Sign", "Sign6", 0);
	AddQuest("castle_1", "memento4");
}
void InteractClueNote(string &in asEntity)
{
	AddQuest("note_scroll_1", "memento8");
}
void UseKeyOnDoor(string &in asItem, string &in asEntity)
{
	SetSwingDoorLocked("mansion_7", false, true);
	PlaySoundAtEntity("", "unlock_door.snt", "mansion_7", 0, false);
	RemoveItem("key_tomb_1");
	GiveSanityBoostSmall();
	CompleteQuest("mansion_7", "memento1");
}

void KeyOnDoor(string &in asItem, string &in asEntity)
{
	SetSwingDoorLocked("mansion_3", false, true);
	PlaySoundAtEntity("", "unlock_door.snt", "mansion_3", 0, false);
	RemoveItem("key_study_1");
	CompleteQuest("mansion_3", "memento2");
}

void KeyOnCellarDoor(string &in asItem, string &in asEntity)
{
	SetSwingDoorLocked("castle_1", false, true);
	PlaySoundAtEntity("", "unlock_door.snt", "castle_1", 0, false);
	RemoveItem("RustyKey");
	CompleteQuest("castle_1", "memento4");
}
void KeyOnLevelDoor(string &in asItem, string &in asEntity)
{
	SetSwingDoorLocked("level_hub_1", false, true);
	PlaySoundAtEntity("", "unlock_door.snt", "level_hub_1", 0, false);
	RemoveItem("hollow_needle_1");
}
void MoveShelf(string &in asEntity, int alState)
{
	if (GetLocalVarInt("Check") == 0)
	{
		if (alState == 1)
		{
			SetMoveObjectState("Shelf", 1);

			PlaySoundAtEntity("", "quest_completed.snt", "Shelf", 0, false);
			PlayMusic("01_puzzle_passage.ogg", false, 1.2, 0, 10, false);
			GiveSanityBoostSmall();
			CompleteQuest("Shelf", "memento3");


			SetLocalVarInt("Check", 1);

			return;
		}
	}
}
void TouchDoor(string &in asEntity)
{
	AddQuest("mansion_7", "memento1");
}
void Door3(string &in asEntity)
{
	AddQuest("Shelf", "memento3");
}
//This is executed every time you enter the level. Can be executed several times. Can be used for playing music and adding checks.//
void OnEnter()
{
	AddEntityCollideCallback("Player", "ScriptArea_2", "kos", true, 1);
}

void kos(string &in asParent, string &in asChild, int alState)
{
  	PlayMusic("04_amb.ogg", true, 1, 3, 1, true);
}
void Stille(string &in asEntity)
{
	StopMusic(1, 1);
}
//This is executed every time you leave the level. Can be executed several times. Can be used for stopping music//
void OnLeave()
{

}
