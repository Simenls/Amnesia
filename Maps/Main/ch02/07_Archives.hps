//This is only executed when the map is loaded for the first time.
//Only happens once. Can be used for adding effects and callbacks that should not repeat.//
void OnStart()
{
  AddUseItemCallback("", "Ladder", "AreaUseItem", "StigeComplete", true);
  AddEntityCollideCallback("Player", "Skummelt", "Sanity", true, 1);
  AddEntityCollideCallback("Stol", "Destroy", "Knas", true, 1);
  AddEntityCollideCallback("Player", "Spawn", "Monster", true, 1);
  AddEntityCollideCallback("Grunt", "GoAway", "NoMonster", true, 1);
  AddEntityCollideCallback("Player", "Guardian", "Boo", true, 1);
  AddEntityCollideCallback("Player", "Spin", "SpinSpin", true, 1);
  AddEntityCollideCallback("Player", "Trapped", "Pound", true, 1);
}
//Note Music Pickup
void PickNoteToSelf(string &in entity, string &in type)
{
	PlayMusic("23_paper_alexander.ogg", false, 0.7f, 0, 10, false);
  SetEntityActive("Trapped", true);
}
void StigeComplete(string &in asItem, string &in asEntity)
{
  RemoveItem(asItem);
  SetEntityActive("LadderDone", true);
  SetEntityActive("LadderArea_1", true);
  SetEntityActive("AreaUseItem", false);
  PlaySoundAtEntity("", "05_attach_ladder.snt", "Player", 0, true);
  GiveSanityBoostSmall();
  PlayMusic("19_puzzle_inject.ogg", false, 1.0f, 0.5f, 5, false);
  CompleteQuest("StigeQuest", "memento6");
}
void Sanity(string &in asParent, string &in asChild, int alState)
{
	GiveSanityDamage(10, false);
}
void Boo(string &in asParent, string &in asChild, int alState)
{
  PlaySoundAtEntity("guardboo", "guardian_distant2", "Player", 2.0f, false);
	StartPlayerLookAt("Dust_1", 5, 10, "");
  CreateParticleSystemAtEntity("FallingDust", "ps_dust_falling_door.ps", "Dust", true);
  StartScreenShake(0.03f, 1.0f, 4.0f,8.0f);
  AddTimer("", 1, "Snu");
}
void Snu(string &in asTimer)
{
	StartPlayerLookAt("Dust_2", 2, 10, "");
  AddTimer("", 1, "SnuTo");
}
void SnuTo(string &in asTimer)
{
	StartPlayerLookAt("Dust_3", 2, 10, "");
  AddTimer("", 1, "SnuTre");
}
void SnuTre(string &in asTimer)
{
	StartPlayerLookAt("Dust", 2, 10, "");
  AddTimer("", 1, "SnuFire");
}
void SnuFire(string &in asTimer)
{
	StopPlayerLookAt();
}
void Knas(string &in asParent, string &in asChild, int alState)
{
	SetPropHealth("Knus", 0);
  GiveSanityBoostSmall();
  CompleteQuest("VeggQuest", "memento7");
}
void Monster(string &in asParent, string &in asChild, int alState)
{
	SetEntityActive("Grunt", true);
  AddEnemyPatrolNode("Grunt", "PathNodeArea_1", 0, "");
	AddEnemyPatrolNode("Grunt", "PathNodeArea_2", 0, "");
	AddEnemyPatrolNode("Grunt", "PathNodeArea_3", 0, "");
	AddEnemyPatrolNode("Grunt", "PathNodeArea_4", 0, "");
	PlaySoundAtEntity("", "react_scare", "Player", 0, false);
  StartPlayerLookAt("Grunt", 5, 10, "");
  AddTimer("", 2, "MonsterGone");
  PlaySoundAtEntity("", "enemy_hallucination_disappear.snt", "Player", 0, true);
  PlayMusic("05_event_steps.ogg", false, 1, 2, 1, true);
}
void MonsterGone(string &in asTimer)
{
	StopPlayerLookAt();
  AddTimer("", 22, "Musikk");
}
void Musikk(string &in asTimer)
{
	RemoveTimer("Musikk");
  PlayMusic("18_amb.ogg", true, 1, 2, 1, true);
}
void NoMonster(string &in asParent, string &in asChild, int alState)
{
  SetEntityActive("Grunt", false);
}
void TouchStige(string &in asEntity)
{
	AddQuest("StigeQuest", "memento6");
  AddTimer("", 0.5, "SeBort");
}
void SeBort(string &in asTimer)
{
	RemoveTimer("SeBort");
  SetEntityActive("StigeQuest", false);
}
void SeNed(string &in asTimer)
{
	RemoveTimer("SeNed");
  SetEntityActive("VeggQuest", false);
}
void Pound(string &in asParent, string &in asChild, int alState)
{
  SetSwingDoorClosed("mansion_11", true, true);
  SetEntityActive("armchair_5", true);
  SetEntityActive("armchair_4", false);
  PlaySoundAtEntity("", "hit_wood3.snt", "DoorPound", 0, false);
	PlaySoundAtEntity("", "close_door.snt", "Player", 0, false);
  AddTimer("", 0.5, "Slag");
}

void Slag(string &in asTimer)
{
  PlaySoundAtEntity("", "react_breath_slow.snt", "Player", 0, false);
  PlaySoundAtEntity("", "react_scare", "Player", 0, false);
  StartPlayerLookAt("DoorPound", 5, 10, "");
  PlaySoundAtEntity("", "enabled03.snt", "DoorPound", 0, false);
  AddTimer("", 0.8, "StartPound");
}
int slagloop=0;
void StartPound(string &in asTimer)
{
  StopPlayerLookAt();
  PlayMusic("15_event_prisoner.ogg", false, 1, 4, 1, true);
  StartScreenShake(0.01f, 1.0f, 4.0f,8.0f);
  AddTimer("", 0.2, "PoundStart");
  AddTimer("", 15, "MusicAfterPound");
}
void PoundStart(string &in asTimer)
{

    CreateParticleSystemAtEntity("", "ps_dust_impact.ps", "DoorPound", false);
    PlaySoundAtEntity("", "lurker_hit_wood.snt", "DoorPound", 0, false);
    if(GetLocalVarInt("slagloop") <20){
      SetLocalVarInt("slagloop", (GetLocalVarInt("slagloop")+1));
      if((GetLocalVarInt("slagloop")==8)){
        AddTimer("", 1.5, "PoundStart");
      }
      else if(((GetLocalVarInt("slagloop")%12)==0)){
        AddTimer("", 1.5, "PoundStart");
      }
      else{
        AddTimer("", 0.2, "PoundStart");
      }
    }
}
void MusicAfterPound(string &in asTimer)
{
    PlayMusic("29_amb.ogg", true, 1, 4, 1, true);
    SetLampLit("Torch", false, true);
    SetLampLit("Torch2", false, true);
    SetLampLit("Torch3", false, true);
    SetLampLit("Torch4", false, true);
    SetLampLit("Torch5", false, true);
    SetLampLit("Torch6", false, true);
    SetLampLit("Torch7", false, true);
    SetLampLit("Torch8", false, true);
    SetLampLit("Torch9", false, true);
    SetLampLit("Torch10", false, true);
    SetLampLit("Torch11", false, true);
    SetLampLit("Torch12", false, true);
    SetLampLit("Torch13", false, true);
    SetLampLit("Torch14", false, true);
    SetLampLit("Torch15", false, true);
    SetLampLit("Torch16", false, true);


}
//This is executed every time you enter the level. //Can be executed several times. Can be used for playing music and adding checks.//
void OnEnter()
{
  AddTimer("Musikk", 1.0f, "MusicStart");
}
void MusicStart(string &in asTimer)
{
	PlayMusic("18_amb.ogg", true, 1, 3, 1, true);
}
void Stille(string &in asEntity)
{
  StopMusic(3, 1);
}

//This is executed every time you leave the level. //Can be executed several times. Can be used for stopping music or ending effects.//
void OnLeave()
{

}
