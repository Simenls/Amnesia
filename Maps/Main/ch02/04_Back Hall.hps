//This is only executed when the map is loaded for the first time.
//Only happens once. Can be used for adding effects and callbacks that should not repeat.//
void OnStart()
{
	AddUseItemCallback("", "Acid_1", "Web", "RemoveSlime", true);
	AddEntityCollideCallback("Player", "Slime_Area", "Give_SlimeQuest", true, 1);
	AddEntityCollideCallback("Player", "Cavein_Area", "CaveIn", true, 1);
	AddEntityCollideCallback("Player", "NoMore", "NoEyes", true, 1);
	AddEntityCollideCallback("Player", "PointOfNoReturn", "Nope", true, 1);
	AddEntityCollideCallback("Player", "monster", "tiss", true, 1);
	AddUseItemCallback("", "LevelKey", "LevelCellar", "KeyOnLevelDoor", true);
}
void tiss(string &in asParent, string &in asChild, int alState)
{
	SetEntityActive("servant_grunt_1", true);
	StartPlayerLookAt("castle_4", 2, 10,"");
	AddTimer("", 1.5, "ikkese");
	AddTimer("", 2, "stengt");
	AddTimer("", 4, "semindre");
	AddEnemyPatrolNode("servant_grunt_1", "PathNodeArea_1", 0, "");
	AddEnemyPatrolNode("servant_grunt_1", "PathNodeArea_2", 0, "");
	AddEnemyPatrolNode("servant_grunt_1", "PathNodeArea_3", 0, "");
	AddEnemyPatrolNode("servant_grunt_1", "PathNodeArea_4", 0, "");
	AddEnemyPatrolNode("servant_grunt_1", "PathNodeArea_5", 0, "");
	AddEnemyPatrolNode("servant_grunt_1", "PathNodeArea_6", 0, "");
	AddEnemyPatrolNode("servant_grunt_1", "PathNodeArea_7", 0, "");
	AddEnemyPatrolNode("servant_grunt_1", "PathNodeArea_8", 0, "");
	AddEnemyPatrolNode("servant_grunt_1", "PathNodeArea_9", 0, "");
	AddEnemyPatrolNode("servant_grunt_1", "PathNodeArea_10", 0, "");
	AddEnemyPatrolNode("servant_grunt_1", "PathNodeArea_11", 0, "");
	AddEnemyPatrolNode("servant_grunt_1", "PathNodeArea_12", 0, "");
	AddEnemyPatrolNode("servant_grunt_1", "PathNodeArea_13", 0, "");
	AddEnemyPatrolNode("servant_grunt_1", "PathNodeArea_14", 0, "");
}

void ikkese(string &in asTimer)
{
	StopPlayerLookAt();
}

void stengt(string &in asTimer)
{
	SetSwingDoorClosed("castle_5", true, true);
	PlaySoundAtEntity("", "react_breath_slow.snt", "Player", 0, false);
	PlaySoundAtEntity("", "close_door.snt", "Player", 0, false);
	GiveSanityDamage(5.0f, true);
	StartPlayerLookAt("ScriptArea_1", 5, 10, "");;
	CreateParticleSystemAtEntity("CaveIn", "ps_dust_impact.ps", "ScriptArea_1", false);
}

void semindre(string &in asTimer)
{
	StopPlayerLookAt();
}
void RemoveSlime(string &in asItem, string &in asEntity)
{
	SetPropHealth(asEntity, 0);
	RemoveItem("Acid_1");
	GiveSanityBoostSmall();
	PlayMusic("02_puzzle.ogg", false, 1.0f, 0, 0, false);
	CompleteQuest("slime", "memento5");
}
void KeyOnLevelDoor(string &in asItem, string &in asEntity)
{
	SetLevelDoorLocked("LevelCellar", false);
	PlaySoundAtEntity("", "unlock_door.snt", "LevelCellar", 0, false);
	RemoveItem("LevelKey");
	GiveSanityBoostSmall();
}

void Give_SlimeQuest(string &in asParent, string &in asChild, int alState)
{
	AddQuest("slime", "memento5");
}
void Nope(string &in asParent, string &in asChild, int alState)
{
	SetMessage("Sign", "Sign10", 0);
}

void NoEyes(string &in asParent, string &in asChild, int alState)
{
	StopPlayerLookAt();
}

void CaveIn(string &in asParent, string &in asChild, int alState)
{
	SetEntityActive("CaveIn", true);
	SetEntityActive("stein", true);
	SetEntityActive("stein1", true);
	SetEntityActive("stein2", true);
	SetEntityActive("stein3", true);
	SetEntityActive("stein4", true);
	SetEntityActive("stein5", true);
	SetEntityActive("stein6", true);
	StartPlayerLookAt("Stones", 5, 10, "");
	StartScreenShake(0.5, 1, 1, 2);
	PlaySoundAtEntity("brak", "explosion_rock_large.snt", "Player", 4, false);
	CreateParticleSystemAtEntity("CaveIn", "ps_dust_impact.ps", "CaveIn", false);
	CreateParticleSystemAtEntity("CaveIn", "ps_dust_impact.ps", "Lantern", false);
	CreateParticleSystemAtEntity("CaveIn", "ps_dust_impact_vert.ps", "CaveIn", false);
	CreateParticleSystemAtEntity("CaveIn", "ps_dust_impact_vert.ps", "Lantern", false);
	AddTimer("", 1.5, "videre");
}

void videre(string &in asTimer)
{
	StopPlayerLookAt();
}
//This is executed every time you enter the level.
//Can be executed several times. Can be used for playing music and adding checks.//
void OnEnter()
{
  AddTimer("Musikk", 1.0f, "MusicStart");
}
void MusicStart(string &in asTimer)
{
	PlayMusic("22_amb.ogg", true, 1, 3, 1, true);
}
void Stille(string &in asEntity)
{
  StopMusic(3, 0);
}
//This is executed every time you leave the level.
//Can be executed several times. Can be used for stopping music or ending effects.//
void OnLeave()
{

}
